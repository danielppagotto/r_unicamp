---
title: "Análise de dados do GEM usando R"
format: html
editor: visual
toc: TRUE
---

## Usando R para explorar dados do GEM

Este código possui algumas seções. A primeira delas será um nivelamento. Em sequência, teremos uma seção sobre a análise exploratória de dados usando o pacote `dplyr` e `ggplot2`. A última seção será para conduzir algumas análises de comparação de grupos.

## Nivelamento de conhecimentos sobre R

### Operações básicas

Como qualquer linguagem de programação, o R executa instruções que são passadas. Vamos introduzir, vendo operações básicas.

```{r}

# operacoes basicas
5 + 5

10 - 6

10*2

5/2

5**2

sqrt(16)

```

Utilize parênteses para ordenar a lógica de prioridade de operações.

```{r}

5*(50-45)

```

É comum atribuirmos valores às variáveis. Para isso, usamos o símbolo `<-` ou `=`. A atribuição é útil, pois deixa o código mais limpo e fácil de prestar manutenção.

```{r}

#Atribuições
x <- 5 + 5
y <- 10 - 16
a <- 9
soma <- a + x
nome <- "daniel"
certo <- TRUE

```

Uma vez realizada a atribuição, os valores aparecem no painel do canto superior direito do RStudio (em *Environment*).

![](imagens/print1.png){fig-align="center" width="419"}

Você pode resgatar valores atribuídos para realizar cálculos com os valores guardados.

```{r}

# como vimos no codigo acima x = 10 e a = 9

x + a


```

Vamos aplicar o que acabamos de aprender para criar uma calculadora de IMC.

```{r}

peso_daniel <- 90
altura_daniel <- 1.78
imc_daniel <- peso_daniel/(altura_daniel)**2
imc_daniel

```

### Trabalhando com vetores

É possível fazer o IMC de vários grupos ao mesmo tempo? Sim, para isso, vamos trabalhar com vetores. O **vetor** é um conjunto unidimensional de objetos de um mesmo tipo.

Traduzindo... imagina uma tabela de excel formada por várias colunas. Uma das colunas é a idade e está expressa em número. Pronto, um vetor é como se fosse uma coluna com valores de um mesmo tipo.

```{r}

# trabalhando com vetores
pesos <- c(65, 95, 75, 77, 80, 68)
alturas <- c(1.60, 1.78, 1.80, 1.68, 1.72, 1.65)
imcs <- pesos/alturas**2
imcs

```

Vamos arrendondar usando duas casas decimais?

```{r}

imcs <- round(imcs, 2)
imcs

```

### Trabalhando com matrizes

As **matrizes** possuem uma estrutura tabular, com linhas e colunas. Porém, semelhante ao vetor, todos os objetos devem ser de um mesmo tipo (ex.: tudo número, tudo caracter).

```{r}

Matriz<-cbind(pesos,alturas,imcs)
Matriz
```

### Trabalhando com dataframes

O dataframe é um estrutura tabular semelhante à matriz. O maior diferencial dela é que você consegue armazenar valores de diferentes tipos (ex.: numérico, characteres, etc).

```{r}

df <- as.data.frame(Matriz)
df
```

## Leitura dos dados

Quem está iniciando o uso de R frequentemente sofre um pouco com a leitura dos dados. Isso é um ponto muito crítico, pois o novo usuário pode se frustrar logo quando está dando os primeiros passos.

Aqui vou tentar explicar como é possível fazer a leitura dos dados sem muitos problemas. Isso abre uma das potencialidades do R: ler dados de múltiplos formatos.

1\) O primeiro passo é localizar onde o seu arquivo está. [Sugiro, fortemente, que deixe o arquivo em alguma pasta de trabalho com todos os arquivos que você vai usar.]{.underline}

Uma boa forma de você localizar onde está o arquivo é usando os três pontinhos conforme print abaixo.

![](imagens/print2.png){fig-align="center" width="582"}

2\) Uma nova janela será aberta. Basta você navegar para achar a pasta onde seu arquivo está localizado. Eu guardei nesta pasta chamada 02_dados.

![](images/clipboard-3574103888.png){fig-align="center" width="513"}

3\) O próximo passo consiste em selecionar a opção "Import Dataset..." conforme o print abaixo.

![](images/clipboard-3267730657.png)

4\) Será aberta uma tela assistente que mostra uma prévia de como os resultados vão aparecer.

![](imagens/print3.png)

Dica de boa prática: copie o código gerado (marcado em vermelho acima), pois na próxima vez que rodar o script não precisa executar todo este passo a passo, basta executar o comando.

```{r}
#| warning: false

GEM_APS <- readxl::read_excel("~/GitHub/r_unicamp/02_dados/GEM_APS.xlsx",
                      col_types = c("numeric", "text", "numeric", 
                                    "numeric", "numeric", "numeric", 
                                    "numeric", "numeric", "numeric", 
                                    "numeric", "numeric", "numeric", 
                                    "numeric", "numeric", "numeric", 
                                    "numeric", "numeric", "numeric"))

```

## Análise exploratória de dados

Nesta seção vamos começar aplicar um conjunto de funções para conseguir adentrar no tratamento e análise exploratória de dados. Antes de começar, assegure que o tidyverse esteja instalado e também carregue o pacote.

Vou carregar outros pacotes que vão ser úteis ao longo das análises.

```{r}
#| warning: FALSE

# instalando o pacote 
# install.packages("tidyverse")


# carregando pacote

library(tidyverse)
library(readxl)
library(readr)
library(skimr)
library(ggrepel)
library(GGally)
library(car)

```

### Função `glimpse`

Glimpse em inglês significa "vislumbre", "olhada rápida", "olhadinha". Esta função ajuda a você conferir rapidamente alguns detalhes sobre o dataframe.

Pelos resultados, é possível ver o número de linhas (1128), colunas (18), os tipos de variáveis e as primeiras observações.

```{r}

glimpse(GEM_APS)

```

### Função `select`

Esta função permite você **selecionar apenas as variáveis** **(colunas) que são do seu interesse no dataframe**.

No código abaixo, vamos selecionar apenas as variáveis com o nome do país, o ano e a variável *Total early-stage entrepreneurial activity* (TEA). Em sequência, vamos guardar o resultado da seleção em um novo objeto.

```{r}

# selecionando apenas as variveis pais, ano, tea
GEM_APS_select <- 
  GEM_APS |> 
  select(economy, year, tea)

# a funcao head() imprime apenas as seis primeiras observacoes

GEM_APS_select |> 
  head()

```

| OBS.: O objeto `|>` se chama pipe. Ele é um elemento muito comum na estrutura do tidyverse. O que ele significa? Ele é artifício para encadear funções no R. Com o passar do seu uso ficará mais claro. O **atalho** para o pipe é **Ctrl + Shift + M**. Observação: em algumas versões, o pipe pode aparecer deste modo `%>%`.

### Função `filter`

Esta função serve para **filtrar apenas observações (linhas) de acordo com um critério**.

Vamos supor que eu queira pegar apenas as observações do Brasil.

```{r}

GEM_APS |> 
  filter(economy == 'Brazil')

```

Vamos supor que eu queira pegar observações do Brasil ou Argentina. Para isso, vamos usar o conector ou (simbolizado por `|`). Vou aproveitar e colocar para ordenar pela coluna ano (year) usando a função `arrange`.

```{r}

GEM_APS |> 
  filter(economy == 'Brazil' | 
         economy == 'Argentina') |> 
  arrange(year)


```

| Viu como o pipe funciona? Eu fiz uma operação primeiro (filtro) e depois consegui encadear com outra função (arrange). 

Vamos supor que eu queira agora pegar os dados de Brasil e Argentina, mas eu queira pegar apenas observações 2010 adiante. Agora vamos ter que usar também o conector and', simbolizado por `&`.

```{r}

GEM_APS |> 
  filter((economy == 'Brazil' | 
         economy == 'Argentina') & year >= 2010)

```

### Função `mutate`

A função `mutate` é útil para a criação de variáveis. Vamos fazer um exercício com a variável `female_male_TEA`, multiplicando-a por 100 para deixar na lógica percentual.

| A variável female_male_TEA indica o quanto que o empreendedorismo por mulheres é balanceado em relação ao masculino. Valores próximos a 1 indicam que há maior balanceamento. Valores próximos a zero indicam que há muito mais homens que mulheres empreendendo. Valor maiores que 1 indicam que há mais mulheres empreendendo em relação a homens. 

Mas se notar, esta variável está como char (qualitativo), mas tem que estar como numérico. Veja a seguir.

```{r}

# funcao class serve para verificar o tipo da variavel

class(GEM_APS$female_male_TEA)
```

Como converter?

```{r}

GEM_APS$female_male_TEA <- as.double(GEM_APS$female_male_TEA)

class(GEM_APS$female_male_TEA)

```

Agora é possível usar a função `mutate`.

```{r}

GEM_APS |> 
  mutate(perc_fem_male_TEA = female_male_TEA * 100) |> 
  select(year, economy, perc_fem_male_TEA) 

```

### Funções `group_by` e `summarise`

As funções `group_by` e `summarise` são geralmente aplicadas em conjunto. A primeira realiza algum agrupamento e a segunda realiza uma sumarização dos dados.

Para exemplificar, vamos pegar dados de 2023 para países da América do Sul e América do Norte. Já vimos como fazer isso usando a função `filter`.

```{r}

# estes sao os paises

americas <- c("Brazil","Chile","Uruguay","Colombia","Canada",
              "Ecuador","Mexico","United States","Venezuela")

# primeiro vamos filtrar o ano de 2023 e depois filtramos aqueles paises que estao no vetor chamado americas

GEM23_americas <- 
  GEM_APS |> 
  filter(year == 2023) |> 
  filter(economy %in% americas)

GEM23_americas

```

O próximo passo é fazer um tratamento para criar uma variável nova que será usada para identificar se é país da América do Norte ou Sul. Para isso, vamos usar a função `mutate`.

```{r}

# usando um if_else verificamos se o nome do pais e Mexico OU Canada OU United States. Caso verdadeiro, atribui-se o valor de 'Norte', caso contrario, atribui-se o valor de Sul a variável hemisferio, que devera vir depois (.after) da variavel economy

GEM23_americas <- 
  GEM23_americas |> 
  mutate(hemisferio = if_else(economy == 'Mexico'|
                           economy == 'Canada'|
                           economy == 'United States',
                           'Norte',
                           'Sul'), .after = economy)

GEM23_americas

```

Agora sim vamos aplicar o group_by e summarise. Vamos agrupar pelo hemisfério e verificar a media da variavel `female_male_TEA`.

```{r}

GEM23_americas |> 
  group_by(hemisferio) |> 
  summarise(media_fmt = mean(female_male_TEA))

```

Nota-se, portanto, que há um maior equilíbrio que empreendedoras e empreendedores no hemisfério sul da américa.

### Funções de join

Existem múltiplos join (ex.: `inner_join`, `left_join`, `right_join`, `full_join`) e a principal função deles é unir dois conjunto de dados.

Vamos ver um exemplo que preparei neste artigo.

[![](imagens/print4.png){fig-align="center" width="411"}](https://regepe.org.br/regepe/article/view/2384)

Vamos ler dois conjuntos de dados que preparei. Separei um recorte da base GEM APS para 2019 e uma base da Worldwide Governance Indicators (WGI).

```{r}
#|warning: FALSE

# Lendo o GEM APS primeiro

gem_aps19 <- read_delim("~/GitHub/r_unicamp/02_dados/gem_2019_aps.csv", 
                      delim = ";",
                      show_col_types = FALSE)

# Lendo a WGI

wgi <- read_delim("~/GitHub/r_unicamp/02_dados/wgi.csv",
                  delim = ",",
                  show_col_types = FALSE) |> 
       select(-`...1`)

```

Vamos olhar as estruturas das duas bases.

```{r}

glimpse(gem_aps19)

```

```{r}

glimpse(wgi)
```

Note que as duas bases possuem variáveis equivalentes. Na base `wgi` a gente tem a variável `code` já a base `gem_aps19` tem a variável `abrev`.

A partir disso, é possível fazer um join.

```{r}

gem_wgi <- 
  gem_aps19 |> 
  left_join(wgi, by = c("abrev"="code"))

gem_wgi
```

O domínio de joins é algo que abre um mar de possibilidades, pois você pode conjugar bases de diferentes domínio. Inclusive, esta é a forma que mais acontece com o GEM, a exemplo dos seguintes estudos.

-   Audretsch, D. B., Belitski, M., Chowdhury, F., & Desai, S. (2022). Necessity or opportunity? Government size, tax policy, corruption, and implications for entrepreneurship. *Small Business Economics*, *58*(4), 2025-2042.

-   Amorós, J. E., Leporati, M., & Torres-Marín, A. J. (2023). Senior entrepreneurship dynamics: Latin America perspective. *International Journal of Entrepreneurial Behavior & Research*.

-   Abdinnour, S., & Adeniji, S. O. (2023). Empirical analysis of the impact of entrepreneurial activity on economic growth of Global Entrepreneurship Monitor (GEM) countries. *Journal of Global Entrepreneurship Research*, *13*(1), 12.

### Função `skimr`

A função skim é do pacote `skimr`. A função `skim` é

```{r}
#|warning: FALSE

gem_wgi |> 
  select(economy, 
         continent,
         entrepreneurship_as_good_carrer_choice,
         tea,
         rule_of_law,
         regulatory_quality,
         political_stability,
         voice_accountability) |> 
  skim()

```

## Análise exploratória com apoio de visualização

O R base contém várias funções de visualização, a exemplo desta abaixo.

```{r}

# cria um histograma usando o R base

boxplot(gem_aps19$entrepreneurship_as_good_carrer_choice)
```

No entanto, existe um pacote chamado ggplot2 que contém uma grande vantagem dele em relação ao R base e outros pacotes estatísticos: a ampla capacidade de customização de gráficos. Vamos usar o mesmo exemplo acima, mas explorando algumas possibilidades de customização.

### Boxplot

```{r}

gem_aps19 |> 
  ggplot(aes(y = entrepreneurship_as_good_carrer_choice)) +
  geom_boxplot() 

```

Vamos customizar os nomes do eixos e acrescentar um título.

```{r}

gem_aps19 |> 
  ggplot(aes(y = entrepreneurship_as_good_carrer_choice)) +
  geom_boxplot() + 
  ylab("Empreendedorismo como opção de carreira") + 
  ggtitle("Histograma - Empreendedorismo como opção de carreira","Fonte: GEM (2019)")

```

Vamos acrescentar dois elementos interessantes. Primeiro, vamos desagregar estes boxplot por continentes usando o parâmetro `fill` e também vamos colocar um fundo branco no gráfico. Também vamos retirar os valores do eixo x e colocar um título ao eixo x.

```{r}

gem_aps19 |> 
  rename(Continente = continent) |> 
  ggplot(aes(y = entrepreneurship_as_good_carrer_choice,
             fill = Continente)) +
  geom_boxplot() + 
  ylab("Empreendedorismo como opção de carreira") + 
  ggtitle("Histograma - Empreendedorismo como opção de carreira",
          "Fonte: GEM (2019)") + 
  xlab("Continente") +
  theme_minimal() +
  theme(axis.text.x = element_blank())


```

Certo, e como salvar isso?

```{r}

# atribuir o grafico a um objeto chamado grafico1

grafico1 <- 
  gem_aps19 |> 
  rename(Continente = continent) |> 
  ggplot(aes(y = entrepreneurship_as_good_carrer_choice,
             fill = Continente)) +
  geom_boxplot() + 
  ylab("Empreendedorismo como opção de carreira") + 
  ggtitle("Histograma - Empreendedorismo como opção de carreira",
          "Fonte: GEM (2019)") + 
  xlab("Continente") +
  theme_minimal() +
theme(
    axis.text.x = element_blank(),
    panel.background = element_rect(fill = "white", 
                                    color = NA),
    axis.title.x = element_text(size = 14), 
    axis.title.y = element_text(size = 14), 
    axis.text.y = element_text(size = 12),
    legend.title = element_text(size = 14),
    legend.text = element_text(size = 14)
  )

ggsave(filename = "grafico1.jpeg", 
       plot = grafico1, 
       height = 6, 
       width = 7,
       dpi = 450)

```

O ChatGPT é um ótimo aliado para visualização de dados. Pergunte para ele como aumentar as fontes dos eixos x e y.

| Sugestão de PROMPT: 
| Como aumentar as fontes dos eixos x e y do gráfico abaixo?

``` R
grafico1 <- 
  gem_aps19 |> 
  rename(Continente = continent) |> 
  ggplot(aes(y = entrepreneurship_as_good_carrer_choice,
             fill = Continente)) +
  geom_boxplot() + 
  ylab("Empreendedorismo como opção de carreira") + 
  ggtitle("Histograma - Empreendedorismo como opção de carreira",
          "Fonte: GEM (2019)") + 
  xlab("Continente") +
  theme_minimal() +
  theme(axis.text.x = element_blank(),
        panel.background = element_rect(fill = "white", 
                                        color = NA))
```

### Gráfico de linhas

Agora eu quero criar um gráfico de linhas para verificar a evolução de determinado indicador.

Vamos acessar dados do GEM NES, que é a base do GEM que levanta informações contextual de cada país a partir de especialistas.

```{r}
#| warning: false

# lendo os dados do GEM NES

GEM_NES <- read_excel("~/GitHub/r_unicamp/02_dados/GEM_NES.xlsx", 
    col_types = c("numeric", "text", "numeric", 
        "numeric", "numeric", "numeric", 
        "numeric", "numeric", "numeric", 
        "numeric", "numeric", "numeric", 
        "numeric", "numeric", "numeric"))


```

Vamos filtrar as observações do Brasil e Chile.

```{r}

br_chile <- GEM_NES |> 
                filter(economy == "Brazil" |
                       economy == "Chile")

```

Vamos agora plotar os gráficos para evolução da variável `governamental_support_policies`. Vamos usar o argumento `color` colocando o nome da variável país para plotar linhas que distinguem as nações. Como o Chile começa a ter um monitoramento contínuo apenas a partir de 2005, vou filtrar as observações.

```{r}

br_chile |> 
  filter(year > 2005) |> 
  ggplot(aes(x = year, 
             y = governamental_support_policies,
             color = economy)) + 
  geom_line()

```

Agora é só melhorar um pouco o gráfico. Vamos colocar títulos aos eixos, bem como aumentar um pouco a espessura da reta.

```{r}

br_chile |> 
  filter(year > 2005) |> 
  ggplot(aes(x = year, 
             y = governamental_support_policies,
             color = economy)) + 
  geom_line(size = 1.5) +
  scale_x_continuous(breaks = seq(2006, 2023, by = 1)) +
  theme_minimal() + 
  xlab("Ano") +
  ylab("Políticas públicas de suporte ao empreendedorismo") +
  ggtitle("Evolução do suporte governamental por meio de políticas públicas - Brasil e Chile","Fonte: GEM-NES") + 
  theme(axis.text.x = element_text(angle = 90, 
                                   hjust = 1)) 

```

### Gráfico de colunas

Vamos trabalhar com uma forma alternativa de visualização da mesma informação?

```{r}

br_chile |> 
  filter(year > 2005) |> 
  ggplot(aes(x = year, 
             y = governamental_support_policies,
             fill = economy)) + 
  geom_col(position = position_dodge(width = 0.9)) +  
  scale_x_continuous(breaks = seq(2006, 2023, by = 1)) +
  geom_text(aes(label = governamental_support_policies), 
            position = position_dodge(width = 0.9),   
            angle = 90, 
            vjust = 0.3, 
            hjust = -0.3,
            size = 3) +  
  theme_minimal() + 
  xlab("Ano") +
  ylab("Políticas públicas de suporte ao empreendedorismo") +
  coord_cartesian(ylim = c(0, 5.73 * 1.1))  +
  theme(axis.text.x = element_text(angle = 90, 
                                   vjust = -2.5)) 


```

A página a seguir contém exemplos da aplicação do ggplot2: <https://r-graph-gallery.com/ggplot2-package.html>

### Gráfico de dispersão

O gráfico de dispersão é usado para associar duas variáveis. No código abaixo trazemos um exemplo e ainda incluímos alguns extras para deixar o gráfico mais interessante.

-   Usando o `geom_point()` conseguimos plotar o pontos.

-   Usando o `geom_smooth(method = 'lm')` conseguimos plotar uma linha que mostra a tendência de associação. O `se` é usado para tirar os intervalos de confiança ao redor da reta.

-   Usando o `geom_text_repel()` conseguimos adicionar textos aos pontos para sinalizar os países;

```{r}

gem_wgi |> 
  ggplot(aes(x = political_stability,
             y = entrepreneurship_as_good_carrer_choice)) + 
  geom_point(size = 1.5, aes(col = continent)) + 
  geom_smooth(method = 'lm', se = FALSE) +
  geom_text_repel(aes(label = economy)) +
  theme_minimal() +
  xlab("Estabilidade política") +
  ylab("Empreendedorismo como opção de carreira")

```

Vamos fazer só mais uma última adição: usar a função `facet_wrap()` para desagregar as visualizações por continente.

```{r}

gem_wgi |> 
  ggplot(aes(x = political_stability,
             y = entrepreneurship_as_good_carrer_choice)) + 
  geom_point(size = 1.5, aes(col = continent)) + 
  geom_smooth(method = 'lm', se = FALSE) +
  geom_text_repel(aes(label = economy)) +
  facet_wrap(~continent) +
  theme_minimal() +
  xlab("Estabilidade política") +
  ylab("Empreendedorismo como opção de carreira")


```

###  Gráfico de diagrama de correlação 

A função `ggpairs()` do pacote `GGally` cria um diagrama de correlação de modo automatizado.

Vamos selecionar apenas algumas variáveis para aplicar.

```{r}

gem_wgi |> 
  select(tea, entrepreneurship_as_good_carrer_choice,
         rule_of_law, political_stability, 
         regulatory_quality) |> 
  ggpairs(progress = FALSE)

```

## ANOVA 

ANOVA é um teste inferencial paramétrico para comparação de médias. A hipótese do teste é avaliar se média populacional de duas ou mais categorias são iguais.

Vamos aplicar o teste para comparar o TEA por continent.

```{r}

modelo <- aov(formula = tea ~ continent, data = gem_wgi)

summary(modelo)

```

De acordo com os resultados, a média do TEA possui diferença significativa na população a p \< 0,05.

Todavia, por ser um teste paramétrico, a ANOVA possui alguns pressupostos que devem ser atendidos.

### Testando pressupostos - homogeneidade da variância

O primeiro teste é da homogeneidade da variância. Vamos usar o teste de Levene para avaliar.

```{r}

leveneTest(tea ~ continent, data = gem_wgi)

```

Se o p-valor for menor que 0,05 significa que temos evidência para rejeitar a hipótese das variâncias. Neste caso, como p \> 0,05 assumimos que temos homogeneidade da variância. Logo, este pressuposto foi atendido.

### Testando pressupostos - normalidade dos resíduos 

Para testar a normalidade dos resíduos vamos usar o teste de Shapiro-Wilk. Neste teste, se p \< 0,05, rejeitamos a hipótese nula. Logo, a distribuição dos resíduos difere de uma distribuição normal.

No nosso caso p\>0,05, logo, a distribuição não difere de uma distribuição normal. Logo, o pressuposto da normalidade é atendido.

```{r}

shapiro.test(resid(modelo))

```

Visualizando o histograma dos resíduos conseguimos perceber que de fato é uma distribuição que se assemelha a uma curva normal, né?

```{r}

hist(resid(modelo))
```

Vamos agora ver o quão diferente são cada par a par de grupos. A última coluna p_adj é o teste para comparação. Observa-se que aqueles cujo p \< 0,05 possuem diferenças significativas (America-Africa; Asia-America; Europa-America)

```{r}

TukeyHSD(modelo)


```
